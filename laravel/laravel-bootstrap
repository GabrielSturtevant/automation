#!/bin/bash

# Alex Hernandez and Matthew Fritz
# Bootstrapping A Laravel Project
# v1.1.0
# ===============================================================|

# GLOBAL VARS
NPM=$(which npm)
PHP=$(which php)
CURL=$(which curl)
BOWER=$(which bower)
COMPOSER=$(which composer)

# COMPOSER DEPENDENCIES
COMPOSER_DEPS="laravelcollective/html guzzlehttp/guzzle:~6.0 tiesa/ldap:dev-master csun-metalab/laravel-proxypass:^1.0 barryvdh/laravel-debugbar"

# APPLICATION EXIT CODES
E_NOERROR=0
E_DEPENDENCY=89

# CONSTANTS
PROJECT_DIR=$(pwd)

# Displays a bit of information about this application
function display_toast() {
  echo "laravel-bootstrap v1.1.0 by Alex Hernandez and Matthew Fritz"
  echo "Bootstraps a Laravel project with front-end and back-end dependencies"
  echo
}

# Asks a Y/n question of the user and provides the result as a boolean.
#
# Example usage:
# retval=$(ask_question "Would you like to do something")
#
# The user then gets prompted with the question along with " (Y/n)? " appended.
#
# Input of y* or Y* results in true; input of n* or N* results in false.
function ask_question() {
  local _question="$1"

  while true; do
    read -p "$_question (Y/n)? " _answer
    # Set default for NULL or UNSET
    # http://www.network-theory.co.uk/docs/bashref/ShellParameterExpansion.html
    case ${_answer:-y} in
    [Yy]* )
      # Function called as $(ask_question "question") so return value can be
      # captured using command substitution
      echo true
      break
      ;;
    [Nn]* )
      # Function called as $(ask_question "question") so return value can be
      # captured using command substitution
      echo false
      break
      ;;
    * )
      printf "Please answer y or n. \n"
      ;;
    esac
  done
}

# Retrieves and adds a GitHub Gist
function get_gist() {
  local _file="$1"
  local _uri="$2"

  ${CURL} -o "${_file}" "${_uri}"
  printf "\n[INFO] Your ${_file} was updated successfully! \n"
}

# Downloads and installs Composer if the dependency is missing
function install_composer() {
  # Make sure Composer has not already been installed
  if [[ ! -z ${COMPOSER} ]]; then
    echo "[INFO] Composer has already been installed so this step will be skipped"
    return;
  fi

  local _retval=$(ask_question "Would you like to install Composer automatically")
  if [[ ${_retval} == false ]]; then
    echo "[ERROR] Composer is a required dependency for this application."
    echo "[ERROR] https://getcomposer.org/download/"
    exit $E_DEPENDENCY
  fi

  # Sometimes Composer is screwy over SSL/TLS so let's ask outright
  local _tls=$(ask_question "Would you like to install over SSL/TLS")

  # Create a /usr/local/composer directory so we can perform the installation
  # in that directory
  mkdir /usr/local/composer
  pushd /usr/local/composer

  # --- BEGIN REFACTORED COMPOSER INSTALLATION CODE ---
  # ORIGINAL: https://getcomposer.org/doc/faqs/how-to-install-composer-programmatically.md
  EXPECTED_SIGNATURE=$(${CURL} -s https://composer.github.io/installer.sig)
  ${PHP} -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
  ACTUAL_SIGNATURE=$(${PHP} -r "echo hash_file('SHA384', 'composer-setup.php');")

  if [ "$EXPECTED_SIGNATURE" != "$ACTUAL_SIGNATURE" ]
  then
      >&2 echo "[ERROR] Invalid Composer installer signature"
      rm composer-setup.php
      exit $E_DEPENDENCY
  fi

  # Install Composer based on whether TLS should be enabled
  if [[ ${_tls} == true ]]; then
    ${PHP} composer-setup.php --quiet
  else
    ${PHP} composer-setup.php --quiet --disable-tls
  fi

  RESULT=$?
  rm composer-setup.php
  # --- END REFACTORED COMPOSER INSTALLATION CODE ---

  # If the composer.phar file does not exist then the installation
  # failed and we need to throw an error
  if [[ ! -a "composer.phar" ]]; then
    echo "[ERROR] Composer installation failed so you will need to do it manually"
    echo "[ERROR] https://getcomposer.org/download/"
    exit $E_DEPENDENCY
  fi

  # Break out of the /usr/local/composer directory
  popd

  # Make a symlink in /usr/local/bin to the composer installation and
  # then break out of that directory
  pushd /usr/local/bin
  ln -s ../composer/composer.phar composer
  popd

  COMPOSER=$(which composer)
  echo "[INFO] Composer has been installed successfully"
}

# Retrieves and installs a Composer package
function get_composer_package() {
  local _package="$1"

  printf "\n[INFO] Fetching '${_package}'... \n"
  ${COMPOSER} require ${_package}
  printf "[INFO] Composer package '${_package}' was added successfully! \n"
}

# Display information about the application
display_toast

# PACKAGE/DEPENDANCY AVAILABILITY CHECK
if [[ -z ${NPM} ]]; then
  echo "[ERROR] Oh no npm is missing!"
  exit $E_DEPENDENCY
elif [[ -z ${PHP} ]]; then
  echo "[ERROR] Oh no php is missing!"
  exit $E_DEPENDENCY
elif [[ -z ${CURL} ]]; then
  echo "[ERROR] Oh no curl is missing!"
  exit $E_DEPENDENCY
elif [[ -z ${BOWER} ]]; then
  echo "[ERROR] Oh no bower is missing!"
  exit $E_DEPENDENCY
elif [[ -z ${COMPOSER} ]]; then
  # Attempt to install Composer if it is missing
  echo "[INFO] It looks like you are missing Composer..."
  install_composer
fi

printf "\n"

# CHECK FOR LARAVEL INSTALL
if [[ ! -f "${PROJECT_DIR}/artisan" ]]; then
  printf "[ERROR] Yo Man... Are you in the correct project directory? \nLaravel not found! \n\n"
  exit $E_DEPENDENCY
fi

# CREATE ENV + APP:KEY IF THE ENV FILE DOES NOT ALREADY EXIST
_env=$(ask_question "Do you wish to add a '.env' file")
if [[ ${_env} == true ]]; then
  if [[ -a ".env" ]]; then
    printf "\n[INFO] Your env file already exists so this step will be skipped.\n"
  else
    cp .env.example .env
    printf "\n[INFO] Your env was updated successfully! \n"
    ${PHP} artisan key:generate
  fi
fi

printf "\n"

# CREATE LARAVEL VIEW DIRECTORIES
_view_dirs=$(ask_question "Do you wish to create master & partial views")

if [[ ${_view_dirs} == true ]]; then
  mkdir "resources/views/pages"
  _page_template_file="landing.blade.php"
  _page_template_gist_uri="https://gist.githubusercontent.com/alexhernandez/486a758fdcac73e27687/raw/7049dbe66ac814038227cccc7f3d1b6f89c5a4a6/page.blade.php"

  pushd "resources/views/pages"
    get_gist "${_page_template_file}" "${_page_template_gist_uri}"
  popd

  mkdir -p "resources/views/layouts/partials"
  _master_template_file="master.blade.php"
  _master_template_gist_uri="https://gist.githubusercontent.com/alexhernandez/bc9f4a1994732e15df3d/raw/2d7d31fa89c3d231156e255d58feb05dc294f273/master.blade.php"

  pushd "resources/views/layouts"
    get_gist "${_master_template_file}" "${_master_template_gist_uri}"
  popd

  pushd "resources/views/layouts/partials"
    touch "nav.blade.php"
    touch "header.blade.php"
    touch "footer.blade.php"
    printf "\n[INFO] Your partials were updated successfully! \n"
  popd
fi

printf "\n"

# ADD DEPENDENCIES
_dependencies=$(ask_question "Do you wish to add all project dependencies (bower,elixir,gulpfile,etc.)")

if [[ ${_dependencies} == true ]]; then
  # Create ".bowerrc" file
  _bower_file=".bowerrc"
  _bower_gist_uri="https://gist.githubusercontent.com/alexhernandez/c3b0d97538f5869d7f86/raw/8411a064facde1ea007585471f7683a0d546e2eb/.bowerrc"
  get_gist "${_bower_file}" "${_bower_gist_uri}"

  # Create "elixir.json" file
  _elixir_file="elixir.json"
  _elixir_gist_uri="https://gist.githubusercontent.com/alexhernandez/963c188f23e14e33929e/raw/a692c7ba6a911292d7d17875dde8c482b22c08a8/elixir.json"
  get_gist "${_elixir_file}" "${_elixir_gist_uri}"

  # Create "Gulpfile" file
  _gulp_file="gulpfile.js"
  _gulp_gist_uri="https://gist.githubusercontent.com/alexhernandez/42df05909d0dbb727ce2/raw/8d52543e942a6191b8e0b0953451e6a565c278fd/gulpfile.js"
  get_gist "${_gulp_file}" "${_gulp_gist_uri}"

  # Fetch and install all necessary Composer packages
  for _composer_package in ${COMPOSER_DEPS} ; do
    get_composer_package "${_composer_package}"
  done

  # Update config/app.php
  printf "\n"
  config_app_file="app.php"
  pushd "config"

    # Update "Providers" array
    sed -i .tmp "/'providers'/ a\\
    \\        Collective\\\Html\\\HtmlServiceProvider::class,\\
    \\        Barryvdh\\\Debugbar\\\ServiceProvider::class,\\
    \\        CSUNMetaLab\\\ProxyPass\\\Providers\\\ProxyPassServiceProvider::class,\\
    " ${config_app_file}

    # Update Aliases" array
    sed -i .tmp "/'aliases'/ a\\
    \\        'Form'      => Collective\\\Html\\\FormFacade::class,\\
    \\        'HTML'      => Collective\\\Html\\\HtmlFacade::class,\\
    \\        'Debugbar'  => Barryvdh\\\Debugbar\\\Facade::class,\\
    " ${config_app_file}

    # Remove .tmp files
    rm "${config_app_file}.tmp"
    printf "[INFO] Your ${config_app_file} was updated successfully!\n"
  popd

  # Now that we have our service providers available, let's go ahead and
  # publish everything necessary from the vendor packages
  printf "[INFO] Publishing vendor configuration and resources...\n"
  ${PHP} artisan vendor:publish
  printf "[INFO] Successfully published vendor assets!\n"

  # Add Bower to project
  # Create "bower.json" file
  printf "\n[INFO] Lets Initialize Bower... \n"
    _bower_file="bower.json"
    _bower_gist_uri="https://gist.githubusercontent.com/alexhernandez/bb21151902015a55d892/raw/2ce0791f347cb2c9ce3ca91304f1f322af248701/bower.json"
    get_gist "${_bower_file}" "${_bower_gist_uri}"

  # Install all Node Packages, --loglevel silent??? Look into this.
  printf "\n[INFO] Now installing Node dependencies... \n Hang tight. This might take a bit... \n\n"
  ${NPM} install
fi

printf "\n[INFO] Yo Man... Your Laravel Application Has Been Successfully Bootstrapped! \n [INFO] Wooooooooooot!!!"
echo ""
exit $E_NOERROR